%% Chapter 1: Starting With Matlab

%% Matlab Windows
% Here are few of the interesting areas that may open up during your Matlab
% session.  If they don't you can always select them from "Desktop" menu
% item
%
% *Command Window:* Main window that allows you to enter variables and run
% programs.
%
% * The command prompt in Matlab looks like this ">>"
%
% * Type *_help_* at the prompt and see what happens.
%
% * You can type multiple commands on a single line if you separate them by
% commas.  Type the following on a single line, "A=5, B=6, C= A+B
%
% * If your command is too long to fit on a single line, it can be
% continued on the next line by typing and ellipsis "..." at the end of the
% line and pressing Enter.
%
% * If a semicolon ";" is typed at the end of a command, the output of the command
% will be generated by the output of the
% command will not displayed in the command window.  _Extremely useful when
% large arrays of data are being computed.  If several commands are typed
% on a line, the output of the commands ended with the semicolons will not
% be displayed.  They
%
% * If a line is preceded by a "%" symbol, the line is designated as a
% comment and the line  will not be executed as a command.  This is
% normally not needed for commands you enter in the command window.  It is
% more useful later when we use the editor to write script and function
% files........
% 
% *Command History Window:* Logs the commands that you have entered in the
% Command Window.
%
% *Workspace Window:* Contains the variables that you have defined in your
% Matlab session.
%
% *Editor Window:* We will use this to create and debug script and function
% files.
%
% *Help Window:*  "help" is the most useful command in Matlab.
%
% There are also Figure and Current Directory Windows available.
% 
%
%% Calculating Stuff
%
% For the most part, the symbols used in matlab to perform standard
% arithmetic
% 
% $$ \begin{tabular}{lll} \textbf{Operation} & \textbf{Symbol} & \textbf{Example} \\ Addition & + & 8+7 \\ 
% Subtraction & - & 3-97 \\ Multiplication & * & 5*4 \\ Right Division & / & 6/5 \\ 
% Left Division & \textbackslash & 5 \textbackslash 3=3/5  \\ Exponentiation & \^{} & 5\textasciicircum 3 = 5*5*5 \end{tabular} $$
%
%% Order of Operations
%
% Matlab executes calculations according to the order of precedence given
% below:
%
% $$ \begin{tabular}{ll} \textbf{Precedence} & \textbf{Mathematical Operation} \\ First &
% Parenthesis. For nested parentheses,
% the innermost are executed first. \\ Second & Exponentiation \\ Third & Multiplication, division (equal precedencce) \\
% Fourth & Addition and  subtraction \end{tabular}$$
%
% In an expression that has several operations, higher precedence
% operations are executed before lower-precedence operations.  If you or
% more operations have the same precedence, the expression is executed
% from left to right.
%
%

%% Display Formats
%
% You can control the format in which Matlab displays the output on the
% screen. 
%
% Determine the output of the following operation 637/9 after typing the
% following command in Matlab
%
% *format short:* Fixed point with 4 decimal digits
%
% *format long:* Fixed point with 15 decimal digits
%
% *format short e:* Scientific notation with 4 decimal digits
%
% *formal long e:* Scientific notation with 15 decimal digits
%
% *format short g:* Best of 5-digit fixed or floating point
%
% *format long g:* Best of 15-digit fixed or floating point
%
% *formal bank:* Two decimal digits
%
% *format compact:* Eliminates empty lines
%
% *format loose:* Adds empty lines
%% Some Elementary Built-in Functions
%
% Matlab has a whole bunch of pre-defined functions to do stuff like
% calculating the square root,  calulating a sine wave, solving O.D.E's,
% etc.
%
% _sqrt(x)_: Square root
%
% _nthroot(x,n)_: Real nth root of a real number x.
%
% _exp(x)_: Exponential ($e^x)
%
% _abs(x)_: Absolute value;
%
% _log(x)_: Natural logarithm. Base e logarithm (ln).
%
% _log10(x)_: Base 10 logarithm
%
% _factorial(x)_: The factorial function x! (x must be a positive integer.)
%
%
%
% _sin(x)_:  Sine of angle x (x in radians)
%
% _sind(x)_: Sine of angle x (x in degrees)
%
% _cos(x)_:  Cosine of angle x (x in radians)
%
% _cosd(x)_: Cosine of angle x (x in degrees)
%
% _tan(x)_:  Tangent of angle x (x in radians)
%
% _tand(x)_:  Tangent of angle x (x in degrees);
%
% The inverse trigonometric functions are given by asin(x), acos(x),
% atan(x), acot(x) and the corresponding asind(x) forms for degrees.  The
% hyperbolic trig functions are given by sinh(x), cosh(x), tanh(x),
% coth(x).
%
% _round(x)_: round to the nearest integer
%
% _fix(x)_: Round toward zero
%
% _ceil(x)_: Round toward infinity
%
% _floor(x)_: Round toward minus infinity
%
% _rem(x,y)_: Return the remainder after x is divided by y
%
% _sign(x)_: Signum function. 1 if x > 0, -1 if x < 0, and 0 if x=0;

%% Defining Variables
%
% In essence, all variables in Matlab are just combinations of
% letters/numbers (the variable name) used to indicate a memory location.
% We can use the name to store stuff. Matlab will automatically set aside
% sufficient memory for the variable during the assignment operation.  So
% the question you are probably asking yourself is...How do we perform the
% assignment.
%
% *The Assignment Operation*
%
% In Matlab the *"="* is the assignment operator.  
%
% We can assign a variable called "variable_name" a value by using the
% following format:
%
% variable_name = A numerical value, or a computable expression.
%
% Note that the left hand side of the assignment operator can only include
% one variable name.  The right hand side of the operator can be a single
% number of a combination of matlab  commands.
%
% The assignment operation takes place after you hit the *Enter* key and
% the result will be displayed in the "Command Window:
%
% *Multiple Assignments on a Single Line*
%
% You can do several assignment one a single line but each assignment must
% be separated with a "," or ";"
%
% For example, examine the result of the following list of assignments typed on a single line:
%
% a = 13, b = a+5 , c = a*b
%
% *Suppressing Results Display*
%
% If you do not want the result to show up in the Command Window but still
% want to perform the assignment, type a ";" after the assignment
% operation.
%
% For example, note the difference in the output of the following two
% expressions:
%
%
% a = 22, b = a+17; c = a*b;
%
% 
%% Rules About Variable Names:
%
% * Must begin with a letter
% * Can be up to 63 characters long
% * Can contain letters, digits, and the underscore character
% * Cannot contain punctuation characters (periods, commas, semicolons)
% * Variable names are case sensitive
% * No spaces are allowed between characters
% * Avoid using names of built-in functions
% 
% _The following Matlab keywords are also not to be used as variable names_
%
% break, case, catch, classdef, continue, else, elseif, end, for,
% function, global, if, otherwise, parfor, persistent, return, spmd,
% switch, try, while.
%
% These names should appear as a different color (blue) when entered. 
%
% *_Other useful predefined variables are_*
%
% *ans* : Holds the value of the last expression that was not assigned to a
% specific variable.
%
% *pi* : The number $\pi$ 
%
% *eps* : The smallest difference between two numbers ...  2^(-52)
%
% *i* : Defined as $\sqrt{-1}$
%
% *j* : Same as i
%
% *NaN* : Not a Number.  Used when Matlab cannot determine a valid numeric
% value.
%
%
%% Useful Commands for Managing Variables
%
% The following commands can be useful when you need to eliminate variables
% or obtain information about variables you have created.
%
% $$\begin{tabular}{l|l} \textbf{Command} & \textbf{Outcome} \\ 
% clear & Removes all variables from the memory  \\ clear x y z & Removes
% only variable x, y, and z from the memory. \\ who & Displays a list of
% the variable currently in the memory \\ whos & Displays current variable
% list, sizes and other info
% \end{tabular} $$

%% Script Files
%
% Imagine if you had to type every command you needed in the command window
% and press enter after every one of them to complete you simulations or calculations.
% This would be really bad for long complicated computations. Luckily
% Matlab provides you the capability of storing sequences of commands in a
% file that can be executed sequentially by entering one command. These
% files are called script (.m ) files.
%
% *Remember*
%
% * The commands in the .m file are executed sequentially
% * Results of commands that do not end in a ; will get displayed in the
% command window
% * You can create the .m file in any text editor but the Matlab Editor
% works best.
%
%
% *Creating and Saving a Script File*
%
% The following instructions assume that you have opened Matlab...
%
% * Select on the "Editor" tab at the top of the Development environment
% * Click "New" and then "Script" from the toolstrip at the top left.
% * Type your sequential commands in the Editor Workspace.
% * *_Lines that begin with a % are interpreted as comments and will not be
% executed._*
% * After entering all your commands, click "Save As" and give your file a
% name.  The file will be save as YourFileName.m
%
% 
% *Running Your Script File*
% 
% Your newly created script file can be executed a couple of different ways
%
% # You can just click "Run" from the Editor toolstrip.
% # Type the name of the file (without the .m) in the Command Window.
% (Note this assumes that the file is stored in current working directory
% of in a directory that is currently in your *Path Preference* <-- Can
% change/add with the "Set Path" option on the Home tab at the top left on
% the toolstrip. You can also change your current directory to the one that
% has your file in the Current Folder Window.

%% Example Problems
%
% Use Matlab to Solve the following Chapter 1 Homework Problems
%
% 2, 5, 9, 10, 15, 16, 20, 23, 24, 27, 30, 31, 36, 39